params {
    reads = ''
    phred = 33
    results = './results'
    pairedEnd = true
    help = false
    collapse=false
    mpa_db_name = "mpa_v20_m200"
    mpa_db_tar = "https://github.com/maxibor/metaphlan-nf/releases/download/0.1/mpa_v20_m200.tar.gz"
}


profiles {
    standard {
        executor {
            name = 'local'
        }
         process{
            withLabel : 'intenso' {
                cpus = 8
                memory = '9G'
            }
            withLabel : 'expresso' {
                cpus = 6
                memory = '2G'
            }
            withLabel : 'ristretto' {
                cpus = 1
                memory = '2G'
            }
            withName : 'multiqc' {
                cpus = 1
                memory = '4G'
            }
        }
    }
    docker {
        docker.enabled = true
        docker.runOptions = '-u \$(id -u):\$(id -g)'
        process {
            withLabel : 'intenso' {
                container = 'maxibor/metaphlan-nf-bio:latest'
            }
            withLabel : 'expresso' {
                container = 'maxibor/metaphlan-nf-bio:latest'
            }
            withLabel : 'ristretto' {
                container = 'maxibor/metaphlan-nf-py:latest'
            }
            withName : 'multiqc' {
                container = 'maxibor/metaphlan-nf-py:latest'
            }
        }
    }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        process {
            withLabel : 'intenso' {
                container = 'maxibor/metaphlan-nf-bio:latest'
            }
            withLabel : 'expresso' {
                container = 'maxibor/metaphlan-nf-bio:latest'
            }
            withLabel : 'ristretto' {
                container = 'maxibor/metaphlan-nf-py:latest'
            }
            withName : 'multiqc' {
                container = 'maxibor/metaphlan-nf-py:latest'
            }
        }
    }
    conda {
        process {
            withLabel : 'intenso' {
                conda = "$baseDir/envs/bio/environment.yml"
            }
            withLabel : 'expresso' {
                conda = "$baseDir/envs/bio/environment.yml"
            }
            withLabel : 'ristretto' {
                conda = "$baseDir/envs/py/environment.yml"
            }
            withName : 'multiqc' {
                 conda = "$baseDir/envs/py/environment.yml"
            }
        }
    }
    test {
        executor {
            name = 'local'
        }
         process{
            cpus = 1
            memory = '4G'
        }
        params {
            reads = "$baseDir/test/reads/*.{1,2}.fastq.gz"
            phred = 64
        }
    }
    test_local {
        params.mpa_db_tar = "$baseDir/test/mpa_v20_m200.tar.gz"
        executor {
            name = 'local'
        }
         process{
            cpus = 6
            memory = '8G'
        }
        params {
            reads = "$baseDir/test/reads/*.{1,2}.fastq.gz"
            phred = 64
        }
    }
    shh_sdag {
        executor {
            name = 'slurm'
            queueSize = 10
        }
        singularity {
            runOptions = '-B /run/shm:/run/shm'
            cacheDir = "/projects1/singularity_scratch/cache/"
        }
        process{
            errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
            maxRetries = 1
            maxErrors = '-1'
            withLabel : 'intenso' {
                queue = 'short'
                cpus = { check_max(8 * task.attempt, 'cpus')}
                memory = { check_max(32.GB *  task.attempt, 'memory')}
                time = { check_max(2.h * task.attempt, 'time')}
            }
            withLabel : 'expresso' {
                queue = 'short'
                cpus = { check_max(6 * task.attempt, 'cpus')}
                memory = { check_max(2.GB * task.attempt, 'memory')}
                time = { check_max(1.h * task.attempt, 'time')}
            }
            withLabel : 'ristretto' {
                queue = 'short'
                cpus = 1 
                memory = { check_max(2.GB * task.attempt, 'memory')}
                time = { check_max(30.m * task.attempt, 'time')} 
            }
            withName : 'multiqc' {
                queue = 'short'
                cpus = 1
                memory = { check_max(4.GB * task.attempt, 'memory')}
                time = { check_max(30.m * task.attempt, 'time')} 
            }
        }
        params {
            max_memory = 256.GB
            max_cpus = 32
            max_time = 720.h
        }
    }
    shh_cdag {
        executor {
            name = 'slurm'
            queueSize = 10
        }
        singularity {
            runOptions = '-B /run/shm:/run/shm'
            cacheDir = "/projects1/singularity_scratch/cache/"
        }
        process{
            errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
            maxRetries = 1
            maxErrors = '-1'
            withLabel : 'intenso' {
                queue = 'long'
                cpus = { check_max(8 * task.attempt, 'cpus')}
                memory = { check_max(12.GB *  task.attempt, 'memory')}
                time = { check_max(2.h * task.attempt, 'time')}
            }
            withLabel : 'expresso' {
                queue = 'long'
                cpus = { check_max(6 * task.attempt, 'cpus')}
                memory = { check_max(2.GB * task.attempt, 'memory')}
                time = { check_max(1.h * task.attempt, 'time')}
            }
            withLabel : 'ristretto' {
                queue = 'long'
                cpus = 1 
                memory = { check_max(2.GB * task.attempt, 'memory')}
                time = { check_max(30.m * task.attempt, 'time')}
            }
            withLabel: 'long_single' {
                queue = 'long'
                cpus = 1
                memory = { check_max(4.GB * task.attempt, 'memory')}
                time = { check_max(30.m * task.attempt, 'time')} 
            }
        }
        params {
            max_memory = 256.GB
            max_cpus = 32
            max_time = 720.h
        }
    }
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
